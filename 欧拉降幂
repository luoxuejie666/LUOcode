
#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;
typedef long long ll;
const int MAX = 1000100;
ll fastPow(ll a, ll b, ll mod)
{
    ll ans = 1;
    a %= mod;
    while (b)
    {
        if (b & 1)
        {
            ans = (ans * a) % mod;
        }
        b >>= 1;
        a = (a * a) % mod;
    }
    return ans;
}
ll eulerFunction(ll x)
{
    ll eulerNumbers = x;
    for (ll i = 2; i * i <= x; i++)
    {
        if (x % i == 0)
        {
            eulerNumbers = eulerNumbers / i * (i - 1);
            while (x % i == 0)
            {
                x /= i;
            }
        }
    }
    if (x > 1)
    {
        eulerNumbers = eulerNumbers / x * (x - 1);
    }
    return eulerNumbers;
}
ll eulerDropPow(ll a, string b, ll c)
{
    ll eulerNumbers = eulerFunction(c);
    ll descendingPower = 0;
    for (ll i = 0, len = b.size(); i < len; ++i)
    {
        descendingPower = (descendingPower * 10 + b[i] - '0') % eulerNumbers;
    }
    descendingPower = (descendingPower + eulerNumbers) % eulerNumbers;
    return fastPow(a, descendingPower, c);
}
int main()
{
    ll a, c;
    string b;
    cin >> a >> b >> c;
    cout << eulerDropPow(a, b, c);
    return 0;
}
